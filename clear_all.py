#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from db import create_pool

async def clear_all():
    print("=== –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    load_dotenv()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        pool = await create_pool()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ë–î")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with pool.acquire() as conn:
            result = await conn.execute("DELETE FROM users;")
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ë–î: {result}")
        
        # –£–¥–∞–ª—è–µ–º –∫–µ—à —Ñ–∞–π–ª—ã
        cache_files = [
            "data/bot_data.pkl",
            "bot_data.pkl",
            Path(__file__).parent / "data" / "bot_data.pkl",
            Path(__file__).parent / "bot_data.pkl"
        ]
        
        for cache_file in cache_files:
            try:
                if isinstance(cache_file, str):
                    cache_file = Path(cache_file)
                if cache_file.exists():
                    cache_file.unlink()
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω –∫–µ—à: {cache_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {cache_file}: {e}")
        
        await pool.close()
        print("‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
        print("python3 bot.py")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(clear_all())
