import asyncio
import asyncpg
from dotenv import load_dotenv
import os

async def test_bot_database():
    load_dotenv()
    
    db_config = {
        'host': os.getenv("DB_HOST", "localhost"),
        'port': int(os.getenv("DB_PORT", "5432")),
        'database': os.getenv("DB_NAME", "FamilyDB"),
        'user': os.getenv("DB_USER", "postgres"),
        'password': os.getenv("DB_PASSWORD", "1")
    }
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...")
        conn = await asyncpg.connect(**db_config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = {
            'tg_id': 123456789,
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'username': 'testuser',
            'gender': 'male',
            'age': 25,
            'vk_id': 'id12345678'
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute('''
            INSERT INTO users (tg_id, name, username, gender, age, vk_id)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (tg_id) 
            DO UPDATE SET 
                name = EXCLUDED.name,
                username = EXCLUDED.username,
                gender = EXCLUDED.gender,
                age = EXCLUDED.age,
                vk_id = EXCLUDED.vk_id,
                updated_at = NOW()
        ''', 
        test_user['tg_id'],
        test_user['name'],
        test_user['username'],
        test_user['gender'],
        test_user['age'],
        test_user['vk_id'])
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: {test_user['name']} (@{test_user['username']})")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow(
            'SELECT * FROM users WHERE tg_id = $1', 
            test_user['tg_id']
        )
        
        print("\nüìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã:")
        for key, value in dict(user).items():
            print(f"- {key}: {value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await conn.execute('''
            UPDATE users 
            SET age = 26, updated_at = NOW()
            WHERE tg_id = $1
        ''', test_user['tg_id'])
        
        print("\nüîÑ –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 26")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        user = await conn.fetchrow(
            'SELECT * FROM users WHERE tg_id = $1', 
            test_user['tg_id']
        )
        print(f"üïí –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {user['updated_at']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –∞—Ñ–∏—à–∏
        poster = await conn.fetchrow('''
            INSERT INTO posters (file_id, caption, ticket_url, is_active)
            VALUES ($1, $2, $3, $4)
            RETURNING *
        ''', 
        'test_file_id_123',
        '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        'https://example.com/tickets/123',
        True)
        
        print(f"\nüé≠ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∞—Ñ–∏—à–∞: {poster['caption']} (ID: {poster['id']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
        attendance = await conn.fetchrow('''
            INSERT INTO attendances (user_id, poster_id, attended_at)
            VALUES ($1, $2, NOW())
            ON CONFLICT (user_id, poster_id) 
            DO UPDATE SET attended_at = NOW()
            RETURNING *
        ''', test_user['tg_id'], poster['id'])
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {attendance['attended_at']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_count = await conn.fetchval('SELECT COUNT(*) FROM users')
        posters_count = await conn.fetchval('SELECT COUNT(*) FROM posters')
        attendances_count = await conn.fetchval('SELECT COUNT(*) FROM attendances')
        
        print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"- –í—Å–µ–≥–æ –∞—Ñ–∏—à: {posters_count}")
        print(f"- –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏: {attendances_count}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...")
    asyncio.run(test_bot_database())
