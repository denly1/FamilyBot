import asyncio
import asyncpg
from dotenv import load_dotenv
import os

async def check_users_table():
    load_dotenv()
    
    db_config = {
        'host': os.getenv("DB_HOST", "localhost"),
        'port': int(os.getenv("DB_PORT", "5432")),
        'database': os.getenv("DB_NAME", "FamilyDB"),
        'user': os.getenv("DB_USER", "postgres"),
        'password': os.getenv("DB_PASSWORD", "1")
    }
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...")
        conn = await asyncpg.connect(**db_config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã users
        columns = await conn.fetch('''
            SELECT column_name, data_type, is_nullable, column_default 
            FROM information_schema.columns 
            WHERE table_name = 'users' 
            ORDER BY ordinal_position
        ''')
        
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in columns:
            print(f"- {col['column_name']} ({col['data_type']}) {'NOT NULL' if col['is_nullable'] == 'NO' else 'NULL'} {f'DEFAULT {col['column_default']}' if col['column_default'] else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ username
        has_username = any(col['column_name'] == 'username' for col in columns)
        print(f"\n–ö–æ–ª–æ–Ω–∫–∞ 'username' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–∞' if has_username else '‚ùå –ù–µ—Ç'}")
        
        if not has_username:
            print("\n–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'username'...")
            await conn.execute('''
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS username TEXT
            ''')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'username' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(check_users_table())
