import asyncio
import asyncpg
from dotenv import load_dotenv
import os

async def check_database():
    load_dotenv()
    
    db_config = {
        'host': os.getenv("DB_HOST", "localhost"),
        'port': int(os.getenv("DB_PORT", "5432")),
        'database': os.getenv("DB_NAME", "FamilyDB"),
        'user': os.getenv("DB_USER", "postgres"),
        'password': os.getenv("DB_PASSWORD", "1")
    }
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {db_config['user']}@**:***@{db_config['host']}:{db_config['port']}/{db_config['database']}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(**db_config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_name = await conn.fetchval('SELECT current_database()')
        db_user = await conn.fetchval('SELECT current_user')
        db_size = await conn.fetchval("SELECT pg_size_pretty(pg_database_size(current_database()))")
        
        print("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user}")
        print(f"üìè –†–∞–∑–º–µ—Ä –ë–î: {db_size}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π
        print("\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
        tables = await conn.fetch('''
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        ''')
        
        for table in tables:
            table_name = table['table_name']
            try:
                count = await conn.fetchval(f'SELECT COUNT(*) FROM "{table_name}"')
                print(f"- {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"- {table_name}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - {str(e)[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        try:
            users = await conn.fetch('SELECT * FROM users LIMIT 5')
            if users:
                print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                for i, user in enumerate(users, 1):
                    print(f"{i}. ID: {user.get('tg_id')}, –ò–º—è: {user.get('name')}, VK: {user.get('vk_id')}")
            else:
                print("–í —Ç–∞–±–ª–∏—Ü–µ users –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ñ–∏—à–∏
        print("\nüé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã posters:")
        try:
            posters = await conn.fetch('SELECT id, title, created_at FROM posters ORDER BY created_at DESC LIMIT 3')
            if posters:
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞—Ñ–∏—à: {len(posters)}")
                for poster in posters:
                    print(f"- {poster['id']}: {poster['title']} ({poster['created_at'].strftime('%d.%m.%Y')})")
            else:
                print("–í —Ç–∞–±–ª–∏—Ü–µ posters –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã posters: {e}")
        
        await conn.close()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –°–µ—Ä–≤–µ—Ä PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ")
        print("3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ localhost)")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ PostgreSQL –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    asyncio.run(check_database())
