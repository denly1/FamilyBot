#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_NAME = os.getenv("DB_NAME", "FamilyDB")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "1")

print("=" * 60)
print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
print("=" * 60)
print(f"Host: {DB_HOST}")
print(f"Port: {DB_PORT}")
print(f"Database: {DB_NAME}")
print(f"User: {DB_USER}")
print(f"Password: {'*' * len(DB_PASSWORD)}")
print("=" * 60)
print()

async def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        print("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        version = await conn.fetchval("SELECT version();")
        print(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è:")
        print(f"   {version}\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT tablename 
            FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename;
        """)
        
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î ({len(tables)}):")
        for table in tables:
            print(f"   ‚Ä¢ {table['tablename']}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
        
        try:
            users_count = await conn.fetchval("SELECT COUNT(*) FROM users;")
            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        except Exception as e:
            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚ùå –û—à–∏–±–∫–∞ ({e})")
        
        try:
            posters_count = await conn.fetchval("SELECT COUNT(*) FROM posters;")
            print(f"   ‚Ä¢ –ê—Ñ–∏—à: {posters_count}")
        except Exception as e:
            print(f"   ‚Ä¢ –ê—Ñ–∏—à: ‚ùå –û—à–∏–±–∫–∞ ({e})")
        
        try:
            attendances_count = await conn.fetchval("SELECT COUNT(*) FROM attendances;")
            print(f"   ‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: {attendances_count}")
        except Exception as e:
            print(f"   ‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: ‚ùå –û—à–∏–±–∫–∞ ({e})")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        print("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'users':")
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_name = 'users'
            ORDER BY ordinal_position;
        """)
        
        if columns:
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                print(f"   ‚Ä¢ {col['column_name']}: {col['data_type']} ({nullable})")
        else:
            print("   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        await conn.close()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except asyncpg.exceptions.InvalidPasswordError:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª–µ .env")
        print("   2. –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ –ø–∞—Ä–æ–ª—è:")
        print("      sudo -u postgres psql -d FamilyDB")
        
    except asyncpg.exceptions.InvalidCatalogNameError:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print(f"   1. –°–æ–∑–¥–∞–π—Ç–µ –ë–î: sudo -u postgres createdb {DB_NAME}")
        print("   2. –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ .env")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {type(e).__name__}")
        print(f"   {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω: systemctl status postgresql")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ pg_hba.conf –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")


if __name__ == "__main__":
    asyncio.run(check_connection())

