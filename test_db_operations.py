import asyncio
from db_config import Database, UserRepository, PosterRepository, AttendanceRepository

async def test_database_operations():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await Database.get_pool()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        test_user = {
            'tg_id': 123456789,
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'gender': 'male',
            'age': 25,
            'vk_id': 'id12345678'
        }
        
        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserRepository.create_or_update_user(test_user)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: {user['name']} (ID: {user['tg_id']})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        user = await UserRepository.get_user(test_user['tg_id'])
        print(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['name']} (–í–æ–∑—Ä–∞—Å—Ç: {user['age']}, –ü–æ–ª: {user['gender']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –∞—Ñ–∏—à–∞–º–∏
        print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∞—Ñ–∏—à–∞–º–∏...")
        test_poster = {
            'file_id': 'test_file_id_123',
            'caption': '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
            'ticket_url': 'https://example.com/tickets/123',
            'is_active': True
        }
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ñ–∏—à—É
        poster = await PosterRepository.create_poster(test_poster)
        print(f"‚úÖ –ê—Ñ–∏—à–∞ —Å–æ–∑–¥–∞–Ω–∞: {poster['caption']} (ID: {poster['id']})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ñ–∏—à
        posters = await PosterRepository.get_active_posters()
        print(f"‚ÑπÔ∏è –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ñ–∏—à: {len(posters)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ—Ç–æ–∫ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏...")
        attendance = await AttendanceRepository.mark_attendance(
            user_id=test_user['tg_id'],
            poster_id=poster['id']
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {attendance['attended_at']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        attendances = await AttendanceRepository.get_user_attendances(test_user['tg_id'])
        print(f"‚ÑπÔ∏è –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(attendances)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await Database.close_pool()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...\n")
    asyncio.run(test_database_operations())
